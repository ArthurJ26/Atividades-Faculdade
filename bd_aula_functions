create schema if not exists bd_aula_functions default character set utf8;
use bd_aula_functions;

create table if not exists aluno(
	id int not null,
    nome varchar(100) not null,
    matricula varchar(45) not null,
    data_nascimento date null,
    data_matricula date not null,
    primary key (id),
    unique index matricula_UNIQUE (matricula ASC)
)Engine = InnoDB;

create table if not exists prova(
	id int not null,
    data_realizacao date not null,
    descricao varchar(255) not null,
    primary key (id)
)Engine = InnoDB;

create table if not exists nota(
	aluno_id int not null,
    prova_id int not null,
    valor_nota decimal(15,2) null,
    primary key (aluno_id, prova_id),
    index fk_aluno_has_prova_prova1 (prova_id ASC),
    index fk_aluno_has_prova_aluno1 (aluno_id ASC),
    constraint fk_aluno_has_prova_aluno1
		foreign key (aluno_id)
		references aluno(id)
		on delete no action
		on update no action,
    constraint fk_aluno_has_prova_prova1
		foreign key (prova_id)
        references prova (id)
        on delete no action
		on update no action
) Engine = InnoDB;

insert into aluno (id, nome, matricula, data_nascimento, data_matricula) values
(1,'Michael John', '123A', str_to_date('23/08/1993', '%d/m%/%Y'), current_date()),
(2,'Willians Junior', '400B', str_to_date('10/04/1993', '%d/m%/%Y'), current_date()),
(3,'John Billboard', '420B', str_to_date('30/07/1993', '%d/m%/%Y'), current_date()),
(4,'Jenny Killy', '010A', null, str_to_date('25/01/2014', '%d/m%/%Y'));

insert into prova (id, data_realizacao, descricao) values
(1, str_to_date('30/03/2014','%d/m%,%Y'), 'Prova A1'),
(2, str_to_date('30/04/2014','%d/m%,%Y'), 'Prova B1'),
(3, str_to_date('30/05/2014','%d/m%,%Y'), 'Prova C1'),
(4, str_to_date('30/07/2014','%d/m%,%Y'), 'Prova A2'),
(5, str_to_date('30/08/2014','%d/m%,%Y'), 'Prova B2'),
(6, str_to_date('30/09/2014','%d/m%,%Y'), 'Prova C2');

insert into nota (aluno_id, prova_id, valor_nota) values
#aluno 1
(1,1,10),
(1,2,9.8),
(1,3,8),
(1,4,10),
(1,5,10),
(1,6,9),

#aluno 2
(2,1,7),
(2,2,7.5),
(2,3,6),
(2,4,8),
(2,5,8.5),
(2,6,9),

#aluno 3
(3,1,9),
(3,2,9.9),
(3,3,9),
(3,4,10),
(3,5,10),
(3,6,9.8),

#aluno 4
(4,1,3),
(4,2,9.6),
(4,3,7),
(4,4,8),
(4,5,7),
(4,6,7);

DELIMITER $
create function calcula_nota(nota numeric(15,2)) returns numeric(15,2)
begin

	declare peso int;

#se a nota do aluno for maior que 9.5 então sua nota terá um peso maior
if nota > 9.5 then
	set peso = 2;
else
	set peso = 1;
end if;

return (nota*peso) / 20;
end
DELIMITER ; 
